# SPDX-License-Identifier: AGPL-3.0-only WITH LICENSE-ADDITIONAL
# Copyright (C) 2025 Петунин Лев Михайлович

"""
healthz.py - Модуль эндпоинта проверки жизнеспособности (liveness) сервиса

Этот модуль предоставляет HTTP эндпоинт /healthz для проверки базовой
работоспособности сервиса. Эндпоинт используется оркестраторами (Kubernetes)
для определения, жив ли контейнер и是否需要 его перезапуск.

Основные характеристики:
- Проверяет только критические внутренние зависимости
- Возвращает HTTP 200 если сервис жив
- Возвращает HTTP 503 если сервис не функционирует
- Быстрый и легковесный (минимальные проверки)
- Не включает проверки внешних зависимостей (это задача readyz)

Использование в Kubernetes:
- Liveness probe: проверяет, нужно ли перезапустить контейнер
- Перезапускает контейнер если эндпоинт возвращает ошибку несколько раз подряд
"""

# Импорт необходимых модулей
from flask import Blueprint, jsonify
import logging

# Импорт для проверки БД
from maintenance.database_connector import is_database_initialized

# Создаем логгер для текущего модуля
logger = logging.getLogger(__name__)

# Создаем Blueprint для healthcheck-эндпоинтов
# Blueprint позволяет организовать группу связанных маршрутов
healthz_bp = Blueprint('healthz', __name__)

def _check_database_connection():
    """
    Проверка подключения к базе данных.
    
    Функция проверяет, была ли инициализирована база данных,
    но не проверяет активное соединение (это делается в readyz).
    
    Returns:
        dict: Словарь со статусом подключения и сообщением
    """
    try:
        # Проверяем, была ли выполнена инициализация БД
        if is_database_initialized():
            return {"status": "connected", "message": "Database connection established"}
        else:
            return {"status": "disconnected", "message": "Database not initialized"}
    except Exception as e:
        # Логируем ошибку и возвращаем статус ошибки
        logger.error(f"Ошибка проверки подключения к БД: {e}")
        return {"status": "error", "message": f"Database connection error: {str(e)}"}

# Декорируем функцию для обработки GET-запросов по пути '/healthz'
@healthz_bp.route('/healthz', methods=['GET'])
def healthz():
    """
    Эндпоинт проверки жизнеспособности (liveness) сервиса.
    
    Этот эндпоинт проверяет базовую работоспособность сервиса.
    Kubernetes использует его для определения необходимости перезапуска контейнера.
    
    Returns:
        Response: JSON ответ со статусом и кодом HTTP:
        - 200 OK: сервис здоров
        - 503 Service Unavailable: сервис не функционирует
    """
    logger.debug("Проверка работоспособности сервиса")
    
    # Проверяем подключение к БД
    db_status = _check_database_connection()
    
    # Определяем общий статус на основе статуса БД
    overall_status = "healthy"
    if db_status["status"] != "connected":
        overall_status = "degraded"
    
    # Формируем детальный ответ
    response_data = {
        "status": overall_status,
        "database": db_status  # Включаем детальную информацию о статусе БД
    }
    
    # Определяем HTTP статус код:
    # - 200 если сервис здоров
    # - 503 если сервис деградировал
    status_code = 200 if overall_status == "healthy" else 503
    
    # Возвращаем JSON ответ с соответствующим статус кодом
    return jsonify(response_data), status_code

# Основные принципы работы этого endpoint:
#
# 1. Назначение эндпоинта /healthz:
#    - Проверка "живости" сервиса (liveness probe)
#    - Определение, нужно ли перезапустить контейнер
#    - Быстрая проверка внутреннего состояния приложения
#
# 2. Отличие от /readyz:
#    - /healthz: проверяет, жив ли процесс (нужен ли перезапуск)
#    - /readyz: проверяет, готов ли сервис принимать трафик
#    - Kubernetes перезапускает контейнер если /healthz возвращает ошибку
#    - Kubernetes временно исключает из балансировки если /readyz возвращает ошибку
#
# 3. Критерии проверки для /healthz:
#    - Процесс приложения запущен и отвечает
#    - Критические внутренние компоненты функционируют
#    - Нет deadlock'ов или бесконечных циклов
#    - Память в пределах разумного (можно добавить проверку)
#
# 4. Что НЕ должно проверяться в /healthz:
#    - Внешние зависимости (базы данных, кэши, API)
#    - Наличие свободного места на диске (это может проверяться отдельно)
#    - Сетевые подключения к внешним сервисам
#
# 5. Рекомендации по реализации:
#    - Проверки должны быть быстрыми (таймаут Kubernetes обычно 1-10 секунд)
#    - Минимизировать внешние зависимости в проверках
#    - Логировать результаты для диагностики
#    - Возвращать понятные сообщения об ошибках
#
# 6. Безопасность:
#    - Эндпоинт не должен раскрывать чувствительную информацию
#    - Можно ограничить доступ к эндпоинту (firewall, authentication)
#    - Не должен быть публично доступным в production
#
# 7. Мониторинг:
#    - Частота проверок: обычно 5-30 секунд
#    - Порог неудачных проверок: 2-3 подряд
#    - Порог успешных проверок: 1-2 подряд для возврата в работу
#
# 8. В продакшне можно добавить проверки:
#    - Доступности критических внутренних ресурсов
#    - Наличия deadlock'ов в основных потоках
#    - Потребления памяти и CPU
#    - Наличия ошибок в критических компонентах
#
# 9. Логирование:
#    - Логировать факт обращения к эндпоинту (уровень DEBUG)
#    - Логировать ошибки проверок (уровень ERROR)
#    - Мониторить частоту и результаты проверок
#
# 10. Интеграция с Kubernetes:
#     - В Deployment указывается:
#       livenessProbe:
#         httpGet:
#           path: /healthz
#           port: 5000
#         initialDelaySeconds: 15
#         periodSeconds: 10
#         timeoutSeconds: 5
#         failureThreshold: 3
#         successThreshold: 1